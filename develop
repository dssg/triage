#!/usr/bin/env bash
#
# install-cli
#
# Copy this file into your project to enable easy, guided
# installation/bootstrapping.
#
# Don't like sh/bash/etc? Sure.
#
# Love sh/bash/etc? Yeah, but....
#
# Let's use it here, to bootstrap whatever tools/libraries/etc. we
# *really* love for our project.
#
# You can name your implementation of this script whatever you like,
# such as: install
#

# Update INSTALL_VERSION to require the version of install-cli this
# script expects
INSTALL_VERSION=0.0.6

#
# start bootstrap installation lib
#
# This is a *bit* of boilerplate to ensure we've downloaded the correct
# version of install-cli. (You probably don't need to touch this.)
#

INSTALL_FILE=.install.${INSTALL_VERSION//./-}.bash.inc

INSTALL_URL=https://raw.githubusercontent.com/dssg/install-cli/$INSTALL_VERSION/install.bash.inc

[ -f $INSTALL_FILE ] || curl -#L $INSTALL_URL -o $INSTALL_FILE

. $INSTALL_FILE

#
# end bootstrap installation lib
#

#
# start project check/install
#

# pyenv

pyenv_bin="${PYENV_ROOT:-$HOME/.pyenv}/bin"
pyenv_homebrew_bin=/usr/local/bin

exists_pyenv_installer() {
  [ -d "$pyenv_bin" ]
}

exists_pyenv_homebrew() {
  [ -x "${pyenv_homebrew_bin}/pyenv" ]
}

exists_pyenv() {
  exists_pyenv_installer || exists_pyenv_homebrew
}

boostrap_pyenv() {
  if exists_pyenv_installer
  then
    export PATH="$pyenv_bin:$PATH"
  elif exists_pyenv_homebrew
  then
    export PATH="$pyenv_homebrew_bin:$PATH"
  fi

  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
}

install_pyenv() {
  curl -#L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash

  boostrap_pyenv  # bootstrap for subsequent commands
}

require pyenv \
  exists_pyenv \
  install_pyenv \
  --fail-prefix="not found"

if exists_pyenv
then
  echo
  icli::set_context pyenv

  if icli::check_command pyenv
  then
    icli::message "${T_FGREEN}initialized ✓"
  else
    icli::message "${T_FRED}not set up ✗"
    icli::message
    icli::message "${T_FYELLOW}hint: add the following lines to your .bashrc, .bash_profile or .zshenv, $(tput sitm)etc."
    icli::message
    icli::message '\texport PATH="~/.pyenv/bin:$PATH"'
    icli::message '\teval "$(pyenv init -)"'
    icli::message '\teval "$(pyenv virtualenv-init -)"'
    icli::message
    icli::message "${T_FMAGENTA}reference: https://github.com/pyenv/pyenv"
    icli::message "${T_FMAGENTA}reference: https://github.com/pyenv/pyenv-installer/"

    boostrap_pyenv  # bootstrap for subsequent commands
  fi

  icli::unset_context
fi

# python

version_info=$(<.python-version.current)

py_version="${version_info#*-}"

which_python() {
  local py_version="$1"

  local installed_info
  local python_exe="python${py_version}"

  while true; do
    if icli::check_command $python_exe || [ $python_exe = python ]; then
      break
    else
      # strip a version part from the exe
      # NOTE: must support POSIX sed (not just GNU)
      python_exe="$(<<<"$python_exe" sed -Ee 's/\.{0,1}[0-9]{1,}$//')"
    fi
  done

  installed_info="$($python_exe --version 2>/dev/null)"
  if icli::check_command $python_exe && [ -z "$installed_info" ]; then
    # python <3.4 printed version to stderr
    installed_info="$($python_exe --version 2>&1)"
  fi

  if [ "${installed_info#* }" = "$py_version" ]; then
    echo $python_exe
    return 0
  else
    return 1
  fi
}

exists_python() {
  if icli::check_command pyenv; then
    pyenv versions 2> /dev/null | grep -E "^ *${py_version}$" > /dev/null
  else
    # check if installed globally or via an active virtual environment
    which_python $py_version > /dev/null
  fi
}

install_python() {
  pyenv install -s $py_version
}

require "python-${py_version}" \
  exists_python \
  install_python \
  --fail-prefix="v${py_version} not found"

# virtualenv

exists_virtualenv() {
  pyenv versions 2> /dev/null | grep "$version_info" > /dev/null
}

install_virtualenv() {
  pyenv virtualenv $py_version $version_info
}

if icli::check_command pyenv
then
  require virtualenv \
    exists_virtualenv \
    install_virtualenv \
    "pyenv project virtual environment \"$version_info\" not found"
else
  echo
  icli::set_context virtualenv
  icli::message "${T_FYELLOW}pyenv required – will not install ✗"
  icli::unset_context
fi

# auto-activation

exists_symlink() {
  [[ "$(readlink .python-version)" = .python-version.current ]]
}

create_symlink() {
  ln -is .python-version.current .python-version
}

if exists_virtualenv
then
  require activation \
    exists_symlink \
    create_symlink \
    "file .python-version not configured to activate \"$version_info\""
else
  echo
  icli::set_context activation
  icli::message "${T_FYELLOW}pyenv-virtualenv required – will not install ✗"
  icli::unset_context
fi

# python libs

install_lib() {
  pip install \
    -r requirement/test.txt \
    -r requirement/dev.txt
}

# no great (easy) way to check that all python libs installed;
# rather, always fail check and let pip figure it out
require libs \
  icli::always_install \
  install_lib

# triage

exists_triage() {
  pip show triage &> /dev/null
}

install_triage() {
  pip install -e ".[rq]"
}

require triage \
  exists_triage \
  install_triage \
  "development library not found"
