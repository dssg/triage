output:
  schema: 'test_results'
  table: 'crosstabs_test'

thresholds:
    rank_abs: [50]
    rank_pct: []

#(optional): a list of entity_ids to subset on the crosstabs analysis
entity_id_list: []

models_list_query: "select unnest(ARRAY[44, 86]) :: int as model_id"

as_of_dates_query: "select unnest(ARRAY['2016-01-13','2017-01-13']) :: date as as_of_date"

#don't change this query unless strictly necessary. It is just validating pairs of (model_id,as_of_date)
#it is just a join with distinct (model_id, as_of_date) in a predictions table
models_dates_join_query: "
select model_id,
      as_of_date
      from models_list_query m
      cross join as_of_dates_query a join (select distinct model_id, as_of_date from test_results.predictions) p
      using (model_id, as_of_date)"

#features_query must join models_dates_join_query with 1 or more features table using as_of_date
features_query: "
select m.model_id, f1.*
 from features.inspections_aggregation_imputed f1 join
 models_dates_join_query m using (as_of_date)"

#the predictions query must return model_id, as_of_date, entity_id, score, label_value, rank_abs and rank_pct
#it must join models_dates_join_query using both model_id and as_of_date
predictions_query: "
select model_id,
      as_of_date,
      entity_id,
      score,
      label_value,
      coalesce(rank_abs, row_number() over (partition by (model_id, as_of_date) order by score desc)) as rank_abs,
      coalesce(rank_pct*100, ntile(100) over (partition by (model_id, as_of_date) order by score desc)) as rank_pct
  from test_results.predictions
  JOIN models_dates_join_query USING(model_id, as_of_date)
  where model_id IN (select model_id from models_list_query)
  AND as_of_date in (select as_of_date from as_of_dates_query)"
